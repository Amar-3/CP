/*

Q> check wether their exist a number x such that given n is a power of 4.
1.st checking for power of 2
2. checking for power of 4

intution
if the number is in power of 2 then all the set bits in its binary representation will be at even position except 2^0.
and if the number is in poewr of 4^x form than their will ony be 1 bit set to 1 rest will be zero , whcih will be present at even
locaion somewhere.


*/
class Solution {
public:
    bool isPowerOfFour(int n) {
        // Step 1: Check if n is positive
        if (n <= 0)
            return false;
        
        // Step 2: Check if n is a power of two
        // (n & (n - 1)) == 0 means n has only one bit set
        if ((n & (n - 1)) == 0) {
            // Step 3: Check if the single set bit is in an even position
            // __builtin_popcount(n - 1) gives the number of 1s in the binary representation of (n - 1)
            // If this number is even, it means the set bit in n is at an even position
            if ((__builtin_popcount(n - 1) & 1) == 0) // n-1 odd number this will count number of set bits in binary represetation of any number.
                return true;
        }
        
        // If any of the checks fail, n is not a power of four
        return false;
    }
};
